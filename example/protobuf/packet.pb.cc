// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "packet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace packet {

namespace {

const ::google::protobuf::Descriptor* RequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_packet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_packet_2eproto() {
  protobuf_AddDesc_packet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "packet.proto");
  GOOGLE_CHECK(file != NULL);
  RequestHeader_descriptor_ = file->message_type(0);
  static const int RequestHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, type_),
  };
  RequestHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestHeader_descriptor_,
      RequestHeader::default_instance_,
      RequestHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _is_default_instance_));
  ResponseHeader_descriptor_ = file->message_type(1);
  static const int ResponseHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, err_msg_),
  };
  ResponseHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseHeader_descriptor_,
      ResponseHeader::default_instance_,
      ResponseHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseHeader, _is_default_instance_));
  NotifyHeader_descriptor_ = file->message_type(2);
  static const int NotifyHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeader, type_),
  };
  NotifyHeader_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotifyHeader_descriptor_,
      NotifyHeader::default_instance_,
      NotifyHeader_offsets_,
      -1,
      -1,
      -1,
      sizeof(NotifyHeader),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeader, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyHeader, _is_default_instance_));
  RequestData_descriptor_ = file->message_type(3);
  static const int RequestData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, body_),
  };
  RequestData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestData_descriptor_,
      RequestData::default_instance_,
      RequestData_offsets_,
      -1,
      -1,
      -1,
      sizeof(RequestData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, _is_default_instance_));
  TestRequest_descriptor_ = file->message_type(4);
  static const int TestRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, order_),
  };
  TestRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestRequest_descriptor_,
      TestRequest::default_instance_,
      TestRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestRequest, _is_default_instance_));
  ResponseData_descriptor_ = file->message_type(5);
  static const int ResponseData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, body_),
  };
  ResponseData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseData_descriptor_,
      ResponseData::default_instance_,
      ResponseData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResponseData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, _is_default_instance_));
  TestResponse_descriptor_ = file->message_type(6);
  static const int TestResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, order_),
  };
  TestResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestResponse_descriptor_,
      TestResponse::default_instance_,
      TestResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestResponse, _is_default_instance_));
  NotifyData_descriptor_ = file->message_type(7);
  static const int NotifyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyData, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyData, body_),
  };
  NotifyData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NotifyData_descriptor_,
      NotifyData::default_instance_,
      NotifyData_offsets_,
      -1,
      -1,
      -1,
      sizeof(NotifyData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyData, _is_default_instance_));
  TestNotify_descriptor_ = file->message_type(8);
  static const int TestNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNotify, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNotify, order_),
  };
  TestNotify_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestNotify_descriptor_,
      TestNotify::default_instance_,
      TestNotify_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestNotify),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNotify, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestNotify, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_packet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestHeader_descriptor_, &RequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseHeader_descriptor_, &ResponseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotifyHeader_descriptor_, &NotifyHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestData_descriptor_, &RequestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestRequest_descriptor_, &TestRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseData_descriptor_, &ResponseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestResponse_descriptor_, &TestResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NotifyData_descriptor_, &NotifyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestNotify_descriptor_, &TestNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_packet_2eproto() {
  delete RequestHeader::default_instance_;
  delete RequestHeader_reflection_;
  delete ResponseHeader::default_instance_;
  delete ResponseHeader_reflection_;
  delete NotifyHeader::default_instance_;
  delete NotifyHeader_reflection_;
  delete RequestData::default_instance_;
  delete RequestData_reflection_;
  delete TestRequest::default_instance_;
  delete TestRequest_reflection_;
  delete ResponseData::default_instance_;
  delete ResponseData_reflection_;
  delete TestResponse::default_instance_;
  delete TestResponse_reflection_;
  delete NotifyData::default_instance_;
  delete NotifyData_reflection_;
  delete TestNotify::default_instance_;
  delete TestNotify_reflection_;
}

void protobuf_AddDesc_packet_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_packet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014packet.proto\022\006packet\"\035\n\rRequestHeader\022"
    "\014\n\004type\030\001 \001(\r\"\?\n\016ResponseHeader\022\014\n\004type\030"
    "\001 \001(\r\022\016\n\006err_no\030\002 \001(\005\022\017\n\007err_msg\030\003 \001(\t\"\034"
    "\n\014NotifyHeader\022\014\n\004type\030\001 \001(\r\"B\n\013RequestD"
    "ata\022%\n\006header\030\001 \001(\0132\025.packet.RequestHead"
    "er\022\014\n\004body\030\002 \001(\014\")\n\013TestRequest\022\013\n\003msg\030\001"
    " \001(\t\022\r\n\005order\030\002 \001(\005\"D\n\014ResponseData\022&\n\006h"
    "eader\030\001 \001(\0132\026.packet.ResponseHeader\022\014\n\004b"
    "ody\030\002 \001(\014\"-\n\014TestResponse\022\016\n\006result\030\001 \001("
    "\t\022\r\n\005order\030\002 \001(\005\"@\n\nNotifyData\022$\n\006header"
    "\030\001 \001(\0132\024.packet.NotifyHeader\022\014\n\004body\030\002 \001"
    "(\014\"(\n\nTestNotify\022\013\n\003msg\030\001 \001(\t\022\r\n\005order\030\002"
    " \001(\005b\006proto3", 492);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "packet.proto", &protobuf_RegisterTypes);
  RequestHeader::default_instance_ = new RequestHeader();
  ResponseHeader::default_instance_ = new ResponseHeader();
  NotifyHeader::default_instance_ = new NotifyHeader();
  RequestData::default_instance_ = new RequestData();
  TestRequest::default_instance_ = new TestRequest();
  ResponseData::default_instance_ = new ResponseData();
  TestResponse::default_instance_ = new TestResponse();
  NotifyData::default_instance_ = new NotifyData();
  TestNotify::default_instance_ = new TestNotify();
  RequestHeader::default_instance_->InitAsDefaultInstance();
  ResponseHeader::default_instance_->InitAsDefaultInstance();
  NotifyHeader::default_instance_->InitAsDefaultInstance();
  RequestData::default_instance_->InitAsDefaultInstance();
  TestRequest::default_instance_->InitAsDefaultInstance();
  ResponseData::default_instance_->InitAsDefaultInstance();
  TestResponse::default_instance_->InitAsDefaultInstance();
  NotifyData::default_instance_->InitAsDefaultInstance();
  TestNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_packet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_packet_2eproto {
  StaticDescriptorInitializer_packet_2eproto() {
    protobuf_AddDesc_packet_2eproto();
  }
} static_descriptor_initializer_packet_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestHeader::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestHeader::RequestHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.RequestHeader)
}

void RequestHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.RequestHeader)
}

void RequestHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0u;
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:packet.RequestHeader)
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHeader_descriptor_;
}

const RequestHeader& RequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

RequestHeader* RequestHeader::default_instance_ = NULL;

RequestHeader* RequestHeader::New(::google::protobuf::Arena* arena) const {
  RequestHeader* n = new RequestHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.RequestHeader)
  type_ = 0u;
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.RequestHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.RequestHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.RequestHeader)
  return false;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.RequestHeader)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.RequestHeader)
}

::google::protobuf::uint8* RequestHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.RequestHeader)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.RequestHeader)
  return target;
}

int RequestHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.RequestHeader)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.RequestHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.RequestHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.RequestHeader)
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.RequestHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {

  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestHeader::InternalSwap(RequestHeader* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHeader_descriptor_;
  metadata.reflection = RequestHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestHeader

// optional uint32 type = 1;
void RequestHeader::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 RequestHeader::type() const {
  // @@protoc_insertion_point(field_get:packet.RequestHeader.type)
  return type_;
}
 void RequestHeader::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:packet.RequestHeader.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseHeader::kTypeFieldNumber;
const int ResponseHeader::kErrNoFieldNumber;
const int ResponseHeader::kErrMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseHeader::ResponseHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.ResponseHeader)
}

void ResponseHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.ResponseHeader)
}

void ResponseHeader::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  err_no_ = 0;
  err_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:packet.ResponseHeader)
  SharedDtor();
}

void ResponseHeader::SharedDtor() {
  err_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseHeader_descriptor_;
}

const ResponseHeader& ResponseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

ResponseHeader* ResponseHeader::default_instance_ = NULL;

ResponseHeader* ResponseHeader::New(::google::protobuf::Arena* arena) const {
  ResponseHeader* n = new ResponseHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.ResponseHeader)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseHeader, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseHeader*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, err_no_);
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ResponseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.ResponseHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_err_no;
        break;
      }

      // optional int32 err_no = 2;
      case 2: {
        if (tag == 16) {
         parse_err_no:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_err_msg;
        break;
      }

      // optional string err_msg = 3;
      case 3: {
        if (tag == 26) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->err_msg().data(), this->err_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "packet.ResponseHeader.err_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.ResponseHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.ResponseHeader)
  return false;
#undef DO_
}

void ResponseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.ResponseHeader)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional int32 err_no = 2;
  if (this->err_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err_no(), output);
  }

  // optional string err_msg = 3;
  if (this->err_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.ResponseHeader.err_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->err_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.ResponseHeader)
}

::google::protobuf::uint8* ResponseHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.ResponseHeader)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional int32 err_no = 2;
  if (this->err_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err_no(), target);
  }

  // optional string err_msg = 3;
  if (this->err_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->err_msg().data(), this->err_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.ResponseHeader.err_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.ResponseHeader)
  return target;
}

int ResponseHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.ResponseHeader)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional int32 err_no = 2;
  if (this->err_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err_no());
  }

  // optional string err_msg = 3;
  if (this->err_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->err_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.ResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.ResponseHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.ResponseHeader)
    MergeFrom(*source);
  }
}

void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.ResponseHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.err_no() != 0) {
    set_err_no(from.err_no());
  }
  if (from.err_msg().size() > 0) {

    err_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
}

void ResponseHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {

  return true;
}

void ResponseHeader::Swap(ResponseHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseHeader::InternalSwap(ResponseHeader* other) {
  std::swap(type_, other->type_);
  std::swap(err_no_, other->err_no_);
  err_msg_.Swap(&other->err_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseHeader_descriptor_;
  metadata.reflection = ResponseHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseHeader

// optional uint32 type = 1;
void ResponseHeader::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 ResponseHeader::type() const {
  // @@protoc_insertion_point(field_get:packet.ResponseHeader.type)
  return type_;
}
 void ResponseHeader::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:packet.ResponseHeader.type)
}

// optional int32 err_no = 2;
void ResponseHeader::clear_err_no() {
  err_no_ = 0;
}
 ::google::protobuf::int32 ResponseHeader::err_no() const {
  // @@protoc_insertion_point(field_get:packet.ResponseHeader.err_no)
  return err_no_;
}
 void ResponseHeader::set_err_no(::google::protobuf::int32 value) {
  
  err_no_ = value;
  // @@protoc_insertion_point(field_set:packet.ResponseHeader.err_no)
}

// optional string err_msg = 3;
void ResponseHeader::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseHeader::err_msg() const {
  // @@protoc_insertion_point(field_get:packet.ResponseHeader.err_msg)
  return err_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseHeader::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.ResponseHeader.err_msg)
}
 void ResponseHeader::set_err_msg(const char* value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.ResponseHeader.err_msg)
}
 void ResponseHeader::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.ResponseHeader.err_msg)
}
 ::std::string* ResponseHeader::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:packet.ResponseHeader.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseHeader::release_err_msg() {
  // @@protoc_insertion_point(field_release:packet.ResponseHeader.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseHeader::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:packet.ResponseHeader.err_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyHeader::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyHeader::NotifyHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.NotifyHeader)
}

void NotifyHeader::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

NotifyHeader::NotifyHeader(const NotifyHeader& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.NotifyHeader)
}

void NotifyHeader::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0u;
}

NotifyHeader::~NotifyHeader() {
  // @@protoc_insertion_point(destructor:packet.NotifyHeader)
  SharedDtor();
}

void NotifyHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyHeader_descriptor_;
}

const NotifyHeader& NotifyHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

NotifyHeader* NotifyHeader::default_instance_ = NULL;

NotifyHeader* NotifyHeader::New(::google::protobuf::Arena* arena) const {
  NotifyHeader* n = new NotifyHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.NotifyHeader)
  type_ = 0u;
}

bool NotifyHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.NotifyHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.NotifyHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.NotifyHeader)
  return false;
#undef DO_
}

void NotifyHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.NotifyHeader)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.NotifyHeader)
}

::google::protobuf::uint8* NotifyHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.NotifyHeader)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.NotifyHeader)
  return target;
}

int NotifyHeader::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.NotifyHeader)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.NotifyHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NotifyHeader* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.NotifyHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.NotifyHeader)
    MergeFrom(*source);
  }
}

void NotifyHeader::MergeFrom(const NotifyHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.NotifyHeader)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void NotifyHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.NotifyHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyHeader::CopyFrom(const NotifyHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.NotifyHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyHeader::IsInitialized() const {

  return true;
}

void NotifyHeader::Swap(NotifyHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyHeader::InternalSwap(NotifyHeader* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyHeader_descriptor_;
  metadata.reflection = NotifyHeader_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyHeader

// optional uint32 type = 1;
void NotifyHeader::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 NotifyHeader::type() const {
  // @@protoc_insertion_point(field_get:packet.NotifyHeader.type)
  return type_;
}
 void NotifyHeader::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:packet.NotifyHeader.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestData::kHeaderFieldNumber;
const int RequestData::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestData::RequestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.RequestData)
}

void RequestData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::packet::RequestHeader*>(&::packet::RequestHeader::default_instance());
}

RequestData::RequestData(const RequestData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.RequestData)
}

void RequestData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestData::~RequestData() {
  // @@protoc_insertion_point(destructor:packet.RequestData)
  SharedDtor();
}

void RequestData::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void RequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestData_descriptor_;
}

const RequestData& RequestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

RequestData* RequestData::default_instance_ = NULL;

RequestData* RequestData::New(::google::protobuf::Arena* arena) const {
  RequestData* n = new RequestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.RequestData)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.RequestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .packet.RequestHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.RequestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.RequestData)
  return false;
#undef DO_
}

void RequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.RequestData)
  // optional .packet.RequestHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.RequestData)
}

::google::protobuf::uint8* RequestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.RequestData)
  // optional .packet.RequestHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.RequestData)
  return target;
}

int RequestData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.RequestData)
  int total_size = 0;

  // optional .packet.RequestHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.RequestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.RequestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.RequestData)
    MergeFrom(*source);
  }
}

void RequestData::MergeFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.RequestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::packet::RequestHeader::MergeFrom(from.header());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void RequestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestData::CopyFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestData::IsInitialized() const {

  return true;
}

void RequestData::Swap(RequestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestData::InternalSwap(RequestData* other) {
  std::swap(header_, other->header_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestData_descriptor_;
  metadata.reflection = RequestData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestData

// optional .packet.RequestHeader header = 1;
bool RequestData::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void RequestData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::packet::RequestHeader& RequestData::header() const {
  // @@protoc_insertion_point(field_get:packet.RequestData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::packet::RequestHeader* RequestData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::packet::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:packet.RequestData.header)
  return header_;
}
::packet::RequestHeader* RequestData::release_header() {
  // @@protoc_insertion_point(field_release:packet.RequestData.header)
  
  ::packet::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void RequestData::set_allocated_header(::packet::RequestHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:packet.RequestData.header)
}

// optional bytes body = 2;
void RequestData::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RequestData::body() const {
  // @@protoc_insertion_point(field_get:packet.RequestData.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestData::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.RequestData.body)
}
 void RequestData::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.RequestData.body)
}
 void RequestData::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.RequestData.body)
}
 ::std::string* RequestData::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:packet.RequestData.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestData::release_body() {
  // @@protoc_insertion_point(field_release:packet.RequestData.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestData::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:packet.RequestData.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestRequest::kMsgFieldNumber;
const int TestRequest::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestRequest::TestRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.TestRequest)
}

void TestRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TestRequest::TestRequest(const TestRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.TestRequest)
}

void TestRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

TestRequest::~TestRequest() {
  // @@protoc_insertion_point(destructor:packet.TestRequest)
  SharedDtor();
}

void TestRequest::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestRequest_descriptor_;
}

const TestRequest& TestRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

TestRequest* TestRequest::default_instance_ = NULL;

TestRequest* TestRequest::New(::google::protobuf::Arena* arena) const {
  TestRequest* n = new TestRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.TestRequest)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

bool TestRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.TestRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "packet.TestRequest.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (tag == 16) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.TestRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.TestRequest)
  return false;
#undef DO_
}

void TestRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.TestRequest)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.TestRequest.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.TestRequest)
}

::google::protobuf::uint8* TestRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.TestRequest)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.TestRequest.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.TestRequest)
  return target;
}

int TestRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.TestRequest)
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.TestRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.TestRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.TestRequest)
    MergeFrom(*source);
  }
}

void TestRequest::MergeFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.TestRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
}

void TestRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestRequest::CopyFrom(const TestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.TestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestRequest::IsInitialized() const {

  return true;
}

void TestRequest::Swap(TestRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestRequest::InternalSwap(TestRequest* other) {
  msg_.Swap(&other->msg_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestRequest_descriptor_;
  metadata.reflection = TestRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestRequest

// optional string msg = 1;
void TestRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestRequest::msg() const {
  // @@protoc_insertion_point(field_get:packet.TestRequest.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestRequest::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.TestRequest.msg)
}
 void TestRequest::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.TestRequest.msg)
}
 void TestRequest::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.TestRequest.msg)
}
 ::std::string* TestRequest::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:packet.TestRequest.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestRequest::release_msg() {
  // @@protoc_insertion_point(field_release:packet.TestRequest.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestRequest::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:packet.TestRequest.msg)
}

// optional int32 order = 2;
void TestRequest::clear_order() {
  order_ = 0;
}
 ::google::protobuf::int32 TestRequest::order() const {
  // @@protoc_insertion_point(field_get:packet.TestRequest.order)
  return order_;
}
 void TestRequest::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:packet.TestRequest.order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseData::kHeaderFieldNumber;
const int ResponseData::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseData::ResponseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.ResponseData)
}

void ResponseData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::packet::ResponseHeader*>(&::packet::ResponseHeader::default_instance());
}

ResponseData::ResponseData(const ResponseData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.ResponseData)
}

void ResponseData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResponseData::~ResponseData() {
  // @@protoc_insertion_point(destructor:packet.ResponseData)
  SharedDtor();
}

void ResponseData::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void ResponseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseData_descriptor_;
}

const ResponseData& ResponseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

ResponseData* ResponseData::default_instance_ = NULL;

ResponseData* ResponseData::New(::google::protobuf::Arena* arena) const {
  ResponseData* n = new ResponseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.ResponseData)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResponseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.ResponseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .packet.ResponseHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.ResponseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.ResponseData)
  return false;
#undef DO_
}

void ResponseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.ResponseData)
  // optional .packet.ResponseHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.ResponseData)
}

::google::protobuf::uint8* ResponseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.ResponseData)
  // optional .packet.ResponseHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.ResponseData)
  return target;
}

int ResponseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.ResponseData)
  int total_size = 0;

  // optional .packet.ResponseHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.ResponseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.ResponseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.ResponseData)
    MergeFrom(*source);
  }
}

void ResponseData::MergeFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.ResponseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::packet::ResponseHeader::MergeFrom(from.header());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void ResponseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseData::CopyFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseData::IsInitialized() const {

  return true;
}

void ResponseData::Swap(ResponseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseData::InternalSwap(ResponseData* other) {
  std::swap(header_, other->header_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseData_descriptor_;
  metadata.reflection = ResponseData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseData

// optional .packet.ResponseHeader header = 1;
bool ResponseData::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void ResponseData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::packet::ResponseHeader& ResponseData::header() const {
  // @@protoc_insertion_point(field_get:packet.ResponseData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::packet::ResponseHeader* ResponseData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::packet::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:packet.ResponseData.header)
  return header_;
}
::packet::ResponseHeader* ResponseData::release_header() {
  // @@protoc_insertion_point(field_release:packet.ResponseData.header)
  
  ::packet::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void ResponseData::set_allocated_header(::packet::ResponseHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:packet.ResponseData.header)
}

// optional bytes body = 2;
void ResponseData::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResponseData::body() const {
  // @@protoc_insertion_point(field_get:packet.ResponseData.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseData::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.ResponseData.body)
}
 void ResponseData::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.ResponseData.body)
}
 void ResponseData::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.ResponseData.body)
}
 ::std::string* ResponseData::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:packet.ResponseData.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseData::release_body() {
  // @@protoc_insertion_point(field_release:packet.ResponseData.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseData::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:packet.ResponseData.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestResponse::kResultFieldNumber;
const int TestResponse::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestResponse::TestResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.TestResponse)
}

void TestResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TestResponse::TestResponse(const TestResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.TestResponse)
}

void TestResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

TestResponse::~TestResponse() {
  // @@protoc_insertion_point(destructor:packet.TestResponse)
  SharedDtor();
}

void TestResponse::SharedDtor() {
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestResponse_descriptor_;
}

const TestResponse& TestResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

TestResponse* TestResponse::default_instance_ = NULL;

TestResponse* TestResponse::New(::google::protobuf::Arena* arena) const {
  TestResponse* n = new TestResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.TestResponse)
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

bool TestResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.TestResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string result = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "packet.TestResponse.result"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (tag == 16) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.TestResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.TestResponse)
  return false;
#undef DO_
}

void TestResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.TestResponse)
  // optional string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.TestResponse.result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->result(), output);
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.TestResponse)
}

::google::protobuf::uint8* TestResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.TestResponse)
  // optional string result = 1;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.TestResponse.result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->result(), target);
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.TestResponse)
  return target;
}

int TestResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.TestResponse)
  int total_size = 0;

  // optional string result = 1;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->result());
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.TestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.TestResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.TestResponse)
    MergeFrom(*source);
  }
}

void TestResponse::MergeFrom(const TestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.TestResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
}

void TestResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResponse::CopyFrom(const TestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.TestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResponse::IsInitialized() const {

  return true;
}

void TestResponse::Swap(TestResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestResponse::InternalSwap(TestResponse* other) {
  result_.Swap(&other->result_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestResponse_descriptor_;
  metadata.reflection = TestResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestResponse

// optional string result = 1;
void TestResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestResponse::result() const {
  // @@protoc_insertion_point(field_get:packet.TestResponse.result)
  return result_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestResponse::set_result(const ::std::string& value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.TestResponse.result)
}
 void TestResponse::set_result(const char* value) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.TestResponse.result)
}
 void TestResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.TestResponse.result)
}
 ::std::string* TestResponse::mutable_result() {
  
  // @@protoc_insertion_point(field_mutable:packet.TestResponse.result)
  return result_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestResponse::release_result() {
  // @@protoc_insertion_point(field_release:packet.TestResponse.result)
  
  return result_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestResponse::set_allocated_result(::std::string* result) {
  if (result != NULL) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:packet.TestResponse.result)
}

// optional int32 order = 2;
void TestResponse::clear_order() {
  order_ = 0;
}
 ::google::protobuf::int32 TestResponse::order() const {
  // @@protoc_insertion_point(field_get:packet.TestResponse.order)
  return order_;
}
 void TestResponse::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:packet.TestResponse.order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NotifyData::kHeaderFieldNumber;
const int NotifyData::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NotifyData::NotifyData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.NotifyData)
}

void NotifyData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  header_ = const_cast< ::packet::NotifyHeader*>(&::packet::NotifyHeader::default_instance());
}

NotifyData::NotifyData(const NotifyData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.NotifyData)
}

void NotifyData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NotifyData::~NotifyData() {
  // @@protoc_insertion_point(destructor:packet.NotifyData)
  SharedDtor();
}

void NotifyData::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void NotifyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyData_descriptor_;
}

const NotifyData& NotifyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

NotifyData* NotifyData::default_instance_ = NULL;

NotifyData* NotifyData::New(::google::protobuf::Arena* arena) const {
  NotifyData* n = new NotifyData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NotifyData::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.NotifyData)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NotifyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.NotifyData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .packet.NotifyHeader header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // optional bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.NotifyData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.NotifyData)
  return false;
#undef DO_
}

void NotifyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.NotifyData)
  // optional .packet.NotifyHeader header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.NotifyData)
}

::google::protobuf::uint8* NotifyData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.NotifyData)
  // optional .packet.NotifyHeader header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.NotifyData)
  return target;
}

int NotifyData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.NotifyData)
  int total_size = 0;

  // optional .packet.NotifyHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // optional bytes body = 2;
  if (this->body().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.NotifyData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NotifyData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NotifyData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.NotifyData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.NotifyData)
    MergeFrom(*source);
  }
}

void NotifyData::MergeFrom(const NotifyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.NotifyData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_header()) {
    mutable_header()->::packet::NotifyHeader::MergeFrom(from.header());
  }
  if (from.body().size() > 0) {

    body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
  }
}

void NotifyData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.NotifyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyData::CopyFrom(const NotifyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.NotifyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyData::IsInitialized() const {

  return true;
}

void NotifyData::Swap(NotifyData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NotifyData::InternalSwap(NotifyData* other) {
  std::swap(header_, other->header_);
  body_.Swap(&other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NotifyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyData_descriptor_;
  metadata.reflection = NotifyData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NotifyData

// optional .packet.NotifyHeader header = 1;
bool NotifyData::has_header() const {
  return !_is_default_instance_ && header_ != NULL;
}
void NotifyData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::packet::NotifyHeader& NotifyData::header() const {
  // @@protoc_insertion_point(field_get:packet.NotifyData.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::packet::NotifyHeader* NotifyData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::packet::NotifyHeader;
  }
  // @@protoc_insertion_point(field_mutable:packet.NotifyData.header)
  return header_;
}
::packet::NotifyHeader* NotifyData::release_header() {
  // @@protoc_insertion_point(field_release:packet.NotifyData.header)
  
  ::packet::NotifyHeader* temp = header_;
  header_ = NULL;
  return temp;
}
void NotifyData::set_allocated_header(::packet::NotifyHeader* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:packet.NotifyData.header)
}

// optional bytes body = 2;
void NotifyData::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& NotifyData::body() const {
  // @@protoc_insertion_point(field_get:packet.NotifyData.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NotifyData::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.NotifyData.body)
}
 void NotifyData::set_body(const char* value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.NotifyData.body)
}
 void NotifyData::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.NotifyData.body)
}
 ::std::string* NotifyData::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:packet.NotifyData.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NotifyData::release_body() {
  // @@protoc_insertion_point(field_release:packet.NotifyData.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NotifyData::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:packet.NotifyData.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestNotify::kMsgFieldNumber;
const int TestNotify::kOrderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestNotify::TestNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packet.TestNotify)
}

void TestNotify::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TestNotify::TestNotify(const TestNotify& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:packet.TestNotify)
}

void TestNotify::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

TestNotify::~TestNotify() {
  // @@protoc_insertion_point(destructor:packet.TestNotify)
  SharedDtor();
}

void TestNotify::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestNotify_descriptor_;
}

const TestNotify& TestNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_packet_2eproto();
  return *default_instance_;
}

TestNotify* TestNotify::default_instance_ = NULL;

TestNotify* TestNotify::New(::google::protobuf::Arena* arena) const {
  TestNotify* n = new TestNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:packet.TestNotify)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  order_ = 0;
}

bool TestNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:packet.TestNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "packet.TestNotify.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (tag == 16) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:packet.TestNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:packet.TestNotify)
  return false;
#undef DO_
}

void TestNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:packet.TestNotify)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.TestNotify.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // @@protoc_insertion_point(serialize_end:packet.TestNotify)
}

::google::protobuf::uint8* TestNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:packet.TestNotify)
  // optional string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "packet.TestNotify.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:packet.TestNotify)
  return target;
}

int TestNotify::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:packet.TestNotify)
  int total_size = 0;

  // optional string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // optional int32 order = 2;
  if (this->order() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packet.TestNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestNotify* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packet.TestNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packet.TestNotify)
    MergeFrom(*source);
  }
}

void TestNotify::MergeFrom(const TestNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packet.TestNotify)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.order() != 0) {
    set_order(from.order());
  }
}

void TestNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packet.TestNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestNotify::CopyFrom(const TestNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packet.TestNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestNotify::IsInitialized() const {

  return true;
}

void TestNotify::Swap(TestNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestNotify::InternalSwap(TestNotify* other) {
  msg_.Swap(&other->msg_);
  std::swap(order_, other->order_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestNotify_descriptor_;
  metadata.reflection = TestNotify_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestNotify

// optional string msg = 1;
void TestNotify::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TestNotify::msg() const {
  // @@protoc_insertion_point(field_get:packet.TestNotify.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestNotify::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.TestNotify.msg)
}
 void TestNotify::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.TestNotify.msg)
}
 void TestNotify::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.TestNotify.msg)
}
 ::std::string* TestNotify::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:packet.TestNotify.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestNotify::release_msg() {
  // @@protoc_insertion_point(field_release:packet.TestNotify.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestNotify::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:packet.TestNotify.msg)
}

// optional int32 order = 2;
void TestNotify::clear_order() {
  order_ = 0;
}
 ::google::protobuf::int32 TestNotify::order() const {
  // @@protoc_insertion_point(field_get:packet.TestNotify.order)
  return order_;
}
 void TestNotify::set_order(::google::protobuf::int32 value) {
  
  order_ = value;
  // @@protoc_insertion_point(field_set:packet.TestNotify.order)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)
